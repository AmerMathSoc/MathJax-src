import { MathItem } from '../../core/MathItem.js';
import { OutputJax } from '../../core/OutputJax.js';
import { OptionList } from '../../util/Options.js';
import { MJContextMenu } from './MJContextMenu.js';
import { MmlVisitor } from './MmlVisitor.js';
import { SelectableInfo } from './SelectableInfo.js';
import { MenuMathDocument } from './MenuHandler.js';
import { Info } from './mj-context-menu.js';
export interface MenuSettings {
    showSRE: boolean;
    showTex: boolean;
    texHints: boolean;
    semantics: boolean;
    zoom: string;
    zscale: string;
    renderer: string;
    alt: boolean;
    cmd: boolean;
    ctrl: boolean;
    shift: boolean;
    scale: string;
    overflow: string;
    breakInline: boolean;
    autocollapse: boolean;
    collapsible: boolean;
    enrich: boolean;
    inTabOrder: boolean;
    assistiveMml: boolean;
    backgroundColor: string;
    backgroundOpacity: string;
    braille: boolean;
    brailleCode: string;
    foregroundColor: string;
    foregroundOpacity: string;
    highlight: string;
    infoPrefix: boolean;
    infoRole: boolean;
    infoType: boolean;
    locale: string;
    magnification: string;
    magnify: string;
    speech: boolean;
    speechRules: string;
    subtitles: boolean;
    treeColoring: boolean;
    viewBraille: boolean;
    voicing: boolean;
}
export type HTMLMATHITEM = MathItem<HTMLElement, Text, Document>;
export type JaxList = {
    [name: string]: OutputJax<HTMLElement, Text, Document>;
};
export declare class Menu {
    static MENU_STORAGE: string;
    static OPTIONS: OptionList;
    static SvgCss: string;
    protected static loading: number;
    protected static loadingPromises: Map<string, Promise<void>>;
    protected static _loadingPromise: Promise<void>;
    protected static _loadingOK: () => void;
    protected static _loadingFailed: (err: Error) => void;
    options: OptionList;
    settings: MenuSettings;
    defaultSettings: MenuSettings;
    menu: MJContextMenu;
    MmlVisitor: MmlVisitor<HTMLElement, Text, Document>;
    protected document: MenuMathDocument;
    protected jax: JaxList;
    protected rerenderStart: number;
    requiredExtensions: string[];
    get isLoading(): boolean;
    get loadingPromise(): Promise<void>;
    protected about: Info;
    protected help: Info;
    protected mathmlCode: SelectableInfo;
    protected originalText: SelectableInfo;
    protected annotationBox: SelectableInfo;
    protected svgImage: SelectableInfo;
    protected speechText: SelectableInfo;
    protected brailleText: SelectableInfo;
    protected errorMessage: SelectableInfo;
    protected zoomBox: Info;
    constructor(document: MenuMathDocument, options?: OptionList);
    protected initSettings(): void;
    protected initMenu(): void;
    protected attachDialogMenus(menu: MJContextMenu): void;
    protected checkLoadableItems(): void;
    protected enableAccessibilityItems(name: string, enable: boolean): void;
    protected mergeUserSettings(): void;
    protected saveUserSettings(): void;
    protected setA11y(options: {
        [key: string]: any;
    }): void;
    protected getA11y(option: string): any;
    protected applySettings(): void;
    protected setOverflow(overflow: string): void;
    protected setInlineBreaks(breaks: boolean): void;
    protected setScale(scale: string): void;
    protected setRenderer(jax: string, rerender?: boolean): Promise<void>;
    protected setOutputJax(jax: string, rerender?: boolean): Promise<void>;
    protected loadRequiredExtensions(): Promise<string[]>;
    addRequiredExtensions(extensions: string[]): void;
    protected setTabOrder(tab: boolean): void;
    protected setAssistiveMml(mml: boolean): void;
    protected setAccessibilityMenus(): void;
    protected setSpeech(speech: boolean): void;
    protected setBraille(braille: boolean): void;
    protected setBrailleCode(code: string): void;
    protected setLocale(locale: string): void;
    protected setEnrichment(enrich: boolean): void;
    protected setCollapsible(collapse: boolean): void;
    protected setHighlight(value: string): void;
    protected scaleAllMath(): void;
    protected resetDefaults(): void;
    checkComponent(name: string): void;
    protected loadComponent(name: string, callback: () => void): void;
    loadA11y(component: string): void;
    protected transferMathList(document: MenuMathDocument): void;
    protected formatSource(text: string): string;
    protected toMML(math: HTMLMATHITEM): string;
    protected toSVG(math: HTMLMATHITEM): Promise<string>;
    protected typesetSVG(math: HTMLMATHITEM, cache: string, breaks: boolean): Promise<string>;
    protected formatSvg(svg: string): string;
    postSvgImage(): void;
    protected zoom(event: MouseEvent, type: string, math: HTMLMATHITEM): void;
    protected isZoomEvent(event: MouseEvent, zoom: string): boolean;
    protected rerender(start?: number): void;
    protected copyMathML(): void;
    protected copyOriginal(): void;
    protected copySvgImage(): void;
    protected copySpeechText(): void;
    protected copyBrailleText(): void;
    protected copyErrorMessage(): void;
    addMenu(math: HTMLMATHITEM): void;
    clear(): void;
    variable<T extends string | boolean>(name: keyof MenuSettings, action?: (value: T) => void): object;
    a11yVar<T extends string | boolean>(name: keyof MenuSettings, action?: (value: T) => void): object;
    submenu(id: string, content: string, entries?: any[], disabled?: boolean): object;
    command(id: string, content: string, action: () => void, other?: object): object;
    checkbox(id: string, content: string, variable: string, other?: object): object;
    radioGroup(variable: string, radios: string[][]): object[];
    radio(id: string, content: string, variable: string, other?: object): object;
    label(id: string, content: string): object;
    rule(): object;
}
