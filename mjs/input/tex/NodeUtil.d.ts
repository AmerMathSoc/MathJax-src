import { TextNode, MMLNODE, MmlNode } from '../../core/MmlTree/MmlNode.js';
import { MmlMo } from '../../core/MmlTree/MmlNodes/mo.js';
import { Property, PropertyList } from '../../core/Tree/Node.js';
import { Args } from './Types.js';
import { OperatorDef } from '../../core/MmlTree/OperatorDictionary.js';
declare const NodeUtil: {
    attrs: Set<string>;
    createEntity(code: string): string;
    getChildren(node: MmlNode): MMLNODE[];
    getText(node: TextNode): string;
    appendChildren(node: MmlNode, children: MMLNODE[]): void;
    setAttribute(node: MmlNode, attribute: string, value: Args): void;
    setProperty(node: MmlNode, property: string, value: Args): void;
    setProperties(node: MmlNode, properties: PropertyList): void;
    getProperty(node: MmlNode, property: string): Property;
    getAttribute(node: MmlNode, attr: string): Property;
    removeAttribute(node: MmlNode, attr: string): void;
    removeProperties(node: MmlNode, ...properties: string[]): void;
    getChildAt(node: MmlNode, position: number): MMLNODE;
    setChild(node: MmlNode, position: number, child: MmlNode): void;
    copyChildren(oldNode: MmlNode, newNode: MmlNode): void;
    copyAttributes(oldNode: MmlNode, newNode: MmlNode): void;
    isType(node: MmlNode, kind: string): boolean;
    isEmbellished(node: MmlNode): boolean;
    getTexClass(node: MmlNode): number;
    getCoreMO(node: MmlNode): MmlNode;
    isNode(item: any): boolean;
    isInferred(node: MmlNode): boolean;
    getForm(node: MmlNode): OperatorDef;
    getOp(mo: MmlMo, form?: string): OperatorDef;
    getMoAttribute(mo: MmlNode, attr: string): Property;
};
export default NodeUtil;
