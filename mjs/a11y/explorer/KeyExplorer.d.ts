import { A11yDocument, HoverRegion, SpeechRegion, LiveRegion } from './Region.js';
import type { ExplorerMathItem } from '../explorer.js';
import { Explorer, AbstractExplorer } from './Explorer.js';
import { ExplorerPool } from './ExplorerPool.js';
import { MmlNode } from '../../core/MmlTree/MmlNode.js';
export interface KeyExplorer extends Explorer {
    KeyDown(event: KeyboardEvent): void;
    FocusIn(event: FocusEvent): void;
    FocusOut(event: FocusEvent): void;
    Move(event: KeyboardEvent): void;
    NoMove(): void;
}
export declare class SpeechExplorer extends AbstractExplorer<string> implements KeyExplorer {
    document: A11yDocument;
    pool: ExplorerPool;
    region: SpeechRegion;
    protected node: HTMLElement;
    brailleRegion: LiveRegion;
    magnifyRegion: HoverRegion;
    item: ExplorerMathItem;
    attached: boolean;
    sound: boolean;
    restarted: string;
    private get generators();
    private oldIndex;
    protected current: HTMLElement;
    private eventsAttached;
    private move;
    private mousedown;
    protected events: [string, (x: Event) => void][];
    protected hasModifiers(event: MouseEvent): boolean;
    private MouseDown;
    Click(event: MouseEvent): void;
    private focusin;
    FocusIn(event: FocusEvent): void;
    FocusOut(_event: FocusEvent): void;
    Attach(): void;
    AddEvents(): void;
    Detach(): void;
    protected nextSibling(el: HTMLElement): HTMLElement;
    protected prevSibling(el: HTMLElement): HTMLElement;
    protected moves: Map<string, (node: HTMLElement) => HTMLElement | null>;
    private actionable;
    depth(node: HTMLElement): HTMLElement;
    expand(node: HTMLElement): HTMLElement;
    summary(node: HTMLElement): HTMLElement;
    nextRules(node: HTMLElement): HTMLElement;
    nextStyle(node: HTMLElement): HTMLElement;
    private refocus;
    Move(e: KeyboardEvent): boolean;
    NoMove(): void;
    constructor(document: A11yDocument, pool: ExplorerPool, region: SpeechRegion, node: HTMLElement, brailleRegion: LiveRegion, magnifyRegion: HoverRegion, _mml: MmlNode, item: ExplorerMathItem);
    private Restart;
    Start(): void;
    Update(): void;
    KeyDown(event: KeyboardEvent): void;
    protected triggerLinkKeyboard(event: KeyboardEvent): boolean;
    protected triggerLink(node: HTMLElement): boolean;
    protected triggerLinkMouse(): boolean;
    Stop(): void;
    semanticFocus(): string;
}
